/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.DoctorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Enterprise.PharmacyEnterprise;
import Business.Network.Network;
import Business.Organization.LabOrganisation;
import Business.Organization.Organisation;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DoctorPharmacyWorkRequest;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vidushi
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    
    private LabTestWorkRequest testRequest;
    private EcoSystem ecosystem;
    private JPanel containerJPanel;
    private Organisation organisation;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Network network;
    
    
    public DoctorWorkAreaJPanel(JPanel containerJPanel, EcoSystem ecosystem, Organisation organisation, Enterprise enterprise, UserAccount userAccount, Network network  ) {
        initComponents();
        
        this.containerJPanel = containerJPanel;
        this.userAccount = userAccount;
        this.ecosystem = ecosystem;
        this.organisation = organisation;
        this.enterprise = enterprise;
       
        populateTable();
        populateLabTestTable();
//        populateMedicineRequestTable();
        
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : organisation.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[4];

            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();
            
            model.addRow(row);
        }
        
    }
    
    public void populateMedicineRequestTable(){
        
        DefaultTableModel model = (DefaultTableModel) orderMedRequestJTable.getModel();        
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[4];
//            row[0] = request.getMedicine();
            row[1] = request.getSender();
            row[2] = request.getReceiver();
            String result = ((DoctorPharmacyWorkRequest) request).getMedicineRequest();
            row[3] = result == null ? "Medicines Ordered" : result;
            
            model.addRow(row);
        }
    }

    
    public void populateLabTestTable(){
            
        DefaultTableModel model = (DefaultTableModel)labTestWorkRequestJTable.getModel();
        
        model.setRowCount(0);
        
        if(enterprise instanceof HospitalEnterprise){
            for(Organisation org: enterprise.getOrganizationDirectory().getOrganizationList()){
                if(org instanceof LabOrganisation){

                    for(WorkRequest request : org.getWorkQueue().getWorkRequestList()){
                        LabTestWorkRequest ltwr = (LabTestWorkRequest)request;                   

                        Object[] row = new Object[5];

                        row[0] = ltwr.getMessage();
                        row[1] = ltwr.getPatient();
                        
                        row[2] = ltwr.getSender()== null ? null :ltwr.getSender().getEmployee().getName();
                        row[3] = ltwr.getStatus();
                        row[4] = ltwr.getLabTestRequest();

                        model.addRow(row); 
                    }
                }
             
            }
        }
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        labTestWorkRequestJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignToMeButton = new javax.swing.JButton();
        prescribeMedicineButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        testRequestTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        requestTestButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        medicineTextArea = new javax.swing.JTextArea();
        viewDetailsButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        orderMedRequestJTable = new javax.swing.JTable();
        refreshButton = new javax.swing.JButton();

        labTestWorkRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Test Requested", "Patient", "Doctor", "Test Status", "Test Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        labTestWorkRequestJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labTestWorkRequestJTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(labTestWorkRequestJTable);

        jLabel1.setText("Doctor Work Area");

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.setMinimumSize(new java.awt.Dimension(200, 100));
        workRequestJTable.setPreferredSize(new java.awt.Dimension(500, 100));
        workRequestJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                workRequestJTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(workRequestJTable);

        assignToMeButton.setText("Assign to me");
        assignToMeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignToMeButtonActionPerformed(evt);
            }
        });

        prescribeMedicineButton.setText("Prescribe Medicine");
        prescribeMedicineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prescribeMedicineButtonActionPerformed(evt);
            }
        });

        testRequestTextArea.setColumns(20);
        testRequestTextArea.setRows(5);
        jScrollPane3.setViewportView(testRequestTextArea);

        jLabel2.setText("Medicine:");

        jLabel3.setText("Test:");

        requestTestButton.setText("Request Test");
        requestTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestButtonActionPerformed(evt);
            }
        });

        medicineTextArea.setColumns(20);
        medicineTextArea.setRows(5);
        jScrollPane4.setViewportView(medicineTextArea);

        viewDetailsButton.setText("View Details");
        viewDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsButtonActionPerformed(evt);
            }
        });

        orderMedRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Medicine", "Doctor", "Pharmacist", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(orderMedRequestJTable);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(assignToMeButton)
                                .addGap(368, 368, 368)
                                .addComponent(viewDetailsButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(prescribeMedicineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(275, 275, 275))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(253, 253, 253)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(requestTestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(314, 314, 314)
                            .addComponent(jLabel1)
                            .addGap(172, 172, 172)
                            .addComponent(refreshButton))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(72, 72, 72)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(111, 111, 111))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(refreshButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignToMeButton)
                    .addComponent(viewDetailsButton))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(prescribeMedicineButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(requestTestButton)))
                .addGap(21, 21, 21))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

    }// </editor-fold>//GEN-END:initComponents

    private void assignToMeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignToMeButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Doctor Assigned");
        populateTable();
        
    }//GEN-LAST:event_assignToMeButtonActionPerformed

    private void prescribeMedicineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prescribeMedicineButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderMedRequestJTable.getSelectedRow();
        if (selectedRow < 0){
            return;
        }
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        
        String medicine = medicineTextArea.getText();
        DoctorPharmacyWorkRequest req = new DoctorPharmacyWorkRequest();
        req.setMedicine(medicine);
        req.setSender(userAccount);
        req.setStatus("Medicines Ordered");
        req.setPatient(request.getSender().getPatient());
                //setPatient(request.getSender().getEmployee().getName());
        
        Organisation org = null;
        
        for(Network network : ecosystem.getNetworkList()){
            for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
                if(enterprise instanceof PharmacyEnterprise)
                    for (Organisation organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                        org = organization;
                        break;
                   }
               }
           }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(req);
            userAccount.getWorkQueue().getWorkRequestList().add(req);
        }
       populateMedicineRequestTable();
    
    }//GEN-LAST:event_prescribeMedicineButtonActionPerformed

    private void requestTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestButtonActionPerformed
        // TODO add your handling code here:
        String message = testRequestTextArea.getText();
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);

        testRequest = new LabTestWorkRequest();
        testRequest.setMessage(message);
        testRequest.setSender(userAccount);
        testRequest.setStatus("Test Requested");
        testRequest.setPatient(request.getSender().getEmployee().getName());
        
        
        Organisation org = null;
        for (Organisation organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof LabOrganisation){
                org = organization;
                break;
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(testRequest);
            userAccount.getWorkQueue().getWorkRequestList().add(testRequest);
        }
        
        populateLabTestTable();
        
        //reset
        testRequestTextArea.setText("");

    }//GEN-LAST:event_requestTestButtonActionPerformed

    private void viewDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_viewDetailsButtonActionPerformed

    private void workRequestJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_workRequestJTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
//        String test = testRequestTextArea.getText();
        
        if (selectedRow < 0){
            return;
        }
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        if(!request.getStatus().isEmpty())
            assignToMeButton.setEnabled(false);
        else
            assignToMeButton.setEnabled(true);
        
        if(request.getReceiver()!=null)
            assignToMeButton.setEnabled(false);
         else
            assignToMeButton.setEnabled(true);
        
        if(request.getStatus().equalsIgnoreCase("Doctor Assigned") && !testRequestTextArea.getText().isEmpty())
            requestTestButton.setEnabled(true);
        else
            requestTestButton.setEnabled(false);
        
    }//GEN-LAST:event_workRequestJTableMouseClicked

    private void labTestWorkRequestJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labTestWorkRequestJTableMouseClicked
        

    }//GEN-LAST:event_labTestWorkRequestJTableMouseClicked

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        populateTable();
        populateLabTestTable();
//        populateMedicineRequestTable();
    }//GEN-LAST:event_refreshButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignToMeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable labTestWorkRequestJTable;
    private javax.swing.JTextArea medicineTextArea;
    private javax.swing.JTable orderMedRequestJTable;
    private javax.swing.JButton prescribeMedicineButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton requestTestButton;
    private javax.swing.JTextArea testRequestTextArea;
    private javax.swing.JButton viewDetailsButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
